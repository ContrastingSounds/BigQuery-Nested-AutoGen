from collections import namedtuple
import copy
import datetime
import json
from pprint import pprint
import re
import shutil
import textwrap

from looker_sdk import client
import lookml

from config import project, dataset, tables

# PROGRAM FLOW
# 1. Initialise table view
# 2. Iterate through the data rows
#    â€“ Use a stack to track the different views
# 3. Write out the individual views
# 4. Write the explore file
# 5. Concat the files

OUTPUT_DIR = 'output'

ViewFromTable = namedtuple('ViewFromTable', 'name partition_column')
NamedView = namedtuple('NamedView', 'fqn view join_column')

# https://stackoverflow.com/questions/1175208/elegant-python-function-to-convert-camelcase-to-snake-case
def snake_case(snake):
    a = re.compile('((?<=[a-z0-9])[A-Z]|(?!^)(?<!_)[A-Z](?=[a-z]))')
    camel = a.sub(r'_\1', snake).lower()
    return camel

def add_column(column, column_fqn, view_stack, views):
    view_fqn = view_stack[-1]
    view_id = snake_case('__'.join(view_fqn))
    
    depth = len(view_fqn)
    label = ' '.join(column_fqn[depth:]).replace('_', ' ')
    table_view = views[view_id].view
    
    tail_idx = -(len(column_fqn) - len(view_fqn))
    tail_fqn = column_fqn[tail_idx:]
    name = snake_case('_'.join(tail_fqn))
    dotted_key = '.'.join(tail_fqn)
    sql = f'${{TABLE}}.{dotted_key}'

    if len(column_fqn) - len(view_fqn) >= 2:
        group_label = ' '.join(column_fqn[depth:-1]).replace('_', ' ').title()
        group_item_label = column_fqn[-1].replace('_', ' ').title()
    else:
        group_label = ''
        group_item_label = ''
        
    
    if column['data_type'].startswith('ARRAY'):
        dim = lookml.Dimension()
        dim.setProperty('sql', sql)
        dim.setName(name)
        dim.hide()
        table_view + dim
        
        view_name = snake_case('__'.join(column_fqn))
        join_column = '.'.join([view_id, name])
        view_stack.append(column_fqn)
        view = lookml.View(view_name).setFolder(OUTPUT_DIR)
        view.setMessage(f'This is an autogenerated view created by python {column_fqn}')
        views[view_name] = NamedView(column_fqn, view, join_column)

    elif column['data_type'] in ['INT64', 'FLOAT64', 'NUMERIC']:
        dim = lookml.Dimension()
        dim.setProperty('sql', sql)
        dim.setName(name)
        dim.setType('number')
        if group_label:
            dim.setProperty('group_label', group_label)
            dim.setProperty('group_item_label', group_item_label)
        table_view + dim

    elif column['data_type'] == 'STRING':
        dim = lookml.Dimension()
        dim.setProperty('sql', sql)
        dim.setName(name)
        dim.setType('string')
        if group_label:
            dim.setProperty('group_label', group_label)
            dim.setProperty('group_item_label', group_item_label)
        table_view + dim

    elif column['data_type'] == 'DATE':
        dim = lookml.DimensionGroup()
        dim.setProperty('datatype', 'date')
        dim.setProperty('convert_tz', 'no')
        dim.setProperty('sql', sql)
        if name[-5:] == '_date':
            name = name[0:-5]
        dim.setName(name)
        dim.setType('time')
        table_view + dim

    elif column['data_type'] == 'TIME':
        dim = lookml.Dimension()
        dim.setProperty('sql', sql)
        dim.setName(name)
        dim.setType('string')
        table_view + dim

    elif column['data_type'] == 'BOOL':
        dim = lookml.Dimension()
        dim.setProperty('sql', sql)
        dim.setName(name)
        dim.setType('yesno')
        if group_label:
            dim.setProperty('group_label', group_label)
            dim.setProperty('group_item_label', group_item_label)
        table_view + dim

def generate_explore_from_data(table_name, sql_table_name, table_definition, partition=None, output_dir=OUTPUT_DIR):   
    # Initialise base table view
    view_name = snake_case(table_name)
    table_view = lookml.View(view_name).setFolder(output_dir)
    table_view.setSqlTableName(sql_table_name=sql_table_name)
    table_view.setMessage('Base table view for nested BigQuery. Autogenerated using lookml (pip install lookml)')
    
    views = {
        view_name: NamedView([table_name], table_view, None)
    }
    
    # Iterate through columns, adding to each to correct view as we go
    view_stack = [[table_name]]    
    for column in table_definition:
        fqn = [table_name] + column['field_path'].split('.')
        if view_stack[-1] != fqn[:len(view_stack[-1])]:
            view_stack.pop()
        add_column(column, fqn, view_stack, views)

        
    # Write the individual views to disk
    for identifier, named_view in views.items():
        named_view.view.write()
        
    # Write the explore file: base view
    explore_name = view_name
    explore_string = f'explore: {explore_name} {{'
    
    if partition:
        explore_string += f'''
  always_filter: {{
    filters: {{
      field: {partition}
      value: "90 days"
    }}
  }}
    '''
    
    # Write the explore file: other views
    for identifier, named_view in views.items():
        if identifier != view_name:
            explore_string += f'''
      join: {named_view.view.identifier} {{
        sql: LEFT JOIN UNNEST(${{{named_view.join_column}}}) as {named_view.view.identifier} ;;
        relationship: one_to_many
      }}
    '''
            
    # Write the explore file: close explore object
    explore_string += '''
    }
    '''
    
    explore_file_name = f'{OUTPUT_DIR}/{views[view_name].view.identifier}.explore.lkml'
    with open(explore_file_name, 'w') as explore_file:
        explore_file.write(explore_string)
        
    # Concat the files
    output = open(OUTPUT_DIR + "/lkml/" + views[view_name].view.fileName, "wb")
    shutil.copyfileobj(open(explore_file_name, "rb"), output)
    for identifier, named_view in views.items():
        shutil.copyfileobj(open(OUTPUT_DIR + "/" + named_view.view.fileName, "rb"), output)
    output.close()

# MAIN

if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR)

if not os.path.exists(os.path.join(OUTPUT_DIR, 'lkml')):
    os.makedirs(os.path.join(OUTPUT_DIR, 'lkml'))

sdk = client.setup()
for table in tables:
    sql = f'''
    SELECT * 
    FROM `{project}.{dataset}..INFORMATION_SCHEMA.COLUMN_FIELD_PATHS`
    WHERE table_name = "{table[0]}"
    '''

    sql_query_body = {
        "model_name": "jdsports",
        "sql": sql
    }

    sql_query = sdk.create_sql_query(sql_query_body)
    sql_response = sdk.run_sql_query(sql_query.slug, 'json')
    table_definition = json.loads(sql_response)
    
    sql_table_name = f'{project}.{dataset}.{table[0]}'
    
    generate_explore_from_data(table.name, sql_table_name, table_definition, partition=table.partition_column)
